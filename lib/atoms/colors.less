//
//  STACK OVERFLOW CAREERS
//  Product UI Style Guide
//  Designed & managed by the Stack Exchange Design Team
//
//  Created May 2, 2014
//  Updated September 11, 2014
//
//  http://careers.stackoveflow.com
//
//  VARIABLES: COLORS
//  
//  TABLE OF CONTENTS
//  • COLOR VARIABLES
//  • COMPONENT COLOR VARIABLES
//    • Text
//    • Forms
//    • Buttons
//    • Navigation
//
//  ============================================================================
//  $ COLOR VARIABLES
//  ============================================================================
//  Color management is a big undertaking in a product like Stack Overflow
//  Careers. Various situations call for varying colors. In the past we would
//  declare all of those values within components, littering our LESS files with
//  either declared colors or color variable names (i.e., #FFF, rgb(255,255,255),
//  @gray-light-01, @gray-dark, etc). This approach made managing colors a losing
//  battle. Like other property variables, they can have global scope or 
//  component scope. Global variables are defined here, as are variables for 
//  simple (primitive) components. Variables for components that have their own
//  LESS file are defined in that file.
//
//  1.  The designers mainly control colors and HSL is a much easier color space
//      to visualize a color within. If you aren't familiar with HSL, it stands
//      for Hue, Saturation, and Lightness. Hue is set in a circular angle, going
//      from red (0º) all the way back around to red again (360º). The major stops
//      along the way are:
//      0     Red
//      60    Yellow
//      120   Green
//      180   Aqua
//      240   Blue
//      300   Purple
//      360   Red
//
//      To generate colors like orange, brown, white, grays, and black, you use the
//      saturation and lightness to move a color forward and backward. For a more
//      in-depth understanding of HSL, visit the W3C's Wiki:
//      http://www.w3.org/wiki/CSS/Properties/color/HSL
//
//  2.  LESS' color functions allow for easier manipulation of colors than RGB.
//      Granted, you could generate the initial the color as a HEX or RGB value and
//      manipulate it using HSL color functions. This is a bit confusing though to
//      declare values one way and manipulate them another. Both HSL and RGB are
//      supported in all browsers except IE6 amd IE8.
//
//  To create variables, the following syntaxes are used:
//  Synatx:     @[propertyName]-[friendlyValueName]: [value]
//  Examples:   @borderWidth-thick: 50px
//              @backgroundColor-green: #0f0
//              @color-orange: hsl(21,88%,100%);     // TODO REVIEW: is it weird that we use color- variables like this
//                                                   // for background-color or border-color, rather than just for 
//                                                   // color property? An alternate variable scheme could be
//                                                   // @[unitType]-[friendlyAlias], e.g. @color-orange, and
//                                                   // @length-thickBorder
//
//  Wrong Color Variable Examples:
//  @orangeLight;
//  @orange-03;
//
//
//  Converting HSB to HSL:
//  HSB is not the same as HSL. In order to convert HSB colors found within
//  Photoshop or Sketch, use the following formulas to determine 
//
//  hh: h: hue
//  ss: s: saturation
//  ll: l: brightness
//
//  ll: (0.5*(l * (2 - s))) * 100; 
//  ss: ((l * s) / (1 - ((2 * ll) - 1))) * 100;
//
// .hsvConvert(@h, @s, @l) {
//   @hh: @h;
//   @ll: percentage(0.5 * (@l * (2 - @s)));
//   @ss: percentage((@l * @s) / (1 - ((2 * @ll) - 1)));
// }
//
//  ----------------------------------------------------------------------------
@color-orange:    hsl(21,100%,56%);
@color-brown:     hsl(35,45%,26%);
@color-yellow:    hsl(50,100%,71%);
@color-green:     hsl(160,63%,61%);
@color-blue:      hsl(205,100%,50%);
@color-red:       hsl(0,75%,50%);

@color-white:     hsl(0,0%,100%);
@color-grayLight: spin(desaturate(lighten(@color-grayMid,50%),3%),-6);
@color-grayMid:   hsl(206,10%,42%);
@color-grayDark:  spin(darken(@color-grayMid,14%),2);
@color-black:     spin(saturate(darken(@color-grayMid,26%),11%),2);

@backgroundColor-grayLighter:  spin(desaturate(lighten(@color-grayMid,53%),6%),-26);
@backgroundColor-grayLight:    @color-grayLight;

@borderColor-grayLight: spin(desaturate(lighten(@color-grayMid,46%),5%),14);
@borderColor-gray:      spin(desaturate(lighten(@color-grayMid,41%),8%),4);


// TODO REVIEW These seem like global variables, but they can also be thought of as component
// variables... test: are they intended for general use, or just for use within the UIKit?
@color-copy:                  @color-grayDark;
@color-copyLight:             darken(@color-grayMid,9%);
@color-copyHelp:              desaturate(lighten(@color-grayMid,12%),8%);

@color-link:                  @color-blue;
@color-linkHover:             spin(@color-link, 2);

@color-titlePage:             saturate(darken(@color-grayDark,12%),16%);
@color-titleSection:          saturate(darken(@color-grayMid,19%),3%);

@color-quote:       @color-grayMid;
@color-quotePull:   saturate(darken(@color-grayMid,19%),3%);


//  ============================================================================
//  COMPONENT VARIABLES
//  
//  In order for us to see where colors are being applied throughout the product
//  within one file, you will need to declare a color component variable. The
//  benefit of this approach is that the impact of changing a color value can be
//  seen within one file versus searching the entire project.
//
//  Variable names should have a strong association between the component,
//  property, and its use. An example of this syntax would be (parens are 
//  optional):
//
//  Syntax:     @[component](_variant)-((element)_variant)-[propertyName]: [value];
//  Examples:   @btn-topShadow-color: hsl(21,88%,100%);             // default button, default topShadow
//              @btn_secondary-topShadow-color: hsl(24, 74%, 100%); // secondary variant
//              @grid-col-width: 100%;
//              @grid-col_2-width: 50%;
//
//  Wrong Variable Name Examples:
//  @orange-nav-menu-item-selected-border;
//  @orangeLight;
//  @orange-03;
//
//  ============================================================================
//  $ COMPONENT VARIABLES: TEXT
//  ============================================================================

/*
TODO Not global. Belongs in _forms.less
//  ============================================================================
//  $ COMPONENT VARIABLES: FORM
//  ============================================================================
//  -- Copy
@formCopy--label:                    @color-grayDark;
@formCopy--input:                    @color-grayDark;
@formCopy--inputDisabled:            darken(@color-white,33%);
@formCopy--placeholder:              fade(@color-grayDark,25%);
//  -- Input: Default
@formInput--backgroundColor:                      @color-white;
@formInput--backgroundFocused:               @color-white;
@formInput--backgroundDisabled:              darken(@color-white,7%);
@formInput--border:                   spin(desaturate(lighten(@color-grayMid,24%),17%),4);
@formInput--borderFocused:            desaturate(lighten(@color-blue,24%),17%);
@formInput--borderDisabled:           fade(saturate(darken(@color-white,30%),1%),50%);
@formInput--shadowDrop:               fade(@color-white,0%);
@formInput--shadowDropFocused:        fade(@color-blue,75%);
@formInput--shadowDropDisabled:       fade(@color-white,0%);
@formInput--shadowInner:              fade(spin(desaturate(lighten(@color-grayMid,10%),12%),4),80%);
@formInput--shadowInnerFocused:       darken(@color-white,5%);
@formInput--shadowInnerDisabled:      fade(spin(desaturate(lighten(@color-grayMid,10%),12%),4),60%);
//  -- Input: Confirmation
@formInputConfirm--border:            spin(saturate(lighten(@color-green,12%),32%),-8);
@formInputConfirm--shadowDropFocused: fade(saturate(lighten(@color-green,1%),9%),75%);
@formInputConfirm--shadowInner:       fade(saturate(lighten(@color-green,1%),9%),75%);
//  -- Input: Warning
@formInputWarning--border:            spin(saturate(@color-yellow,41%),-5);
@formInputWarning--shadowDropFocused: fade(spin(saturate(@color-yellow,37%),-5),75%);
@formInputWarning--shadowInner:       fade(spin(saturate(@color-yellow,37%),-5),75%);
//  -- Input: Error
@formInputWarning--border:            @color-red;
@formInputWarning--shadowDropFocused: fade(@color-red,85%);
@formInputWarning--shadowInner:       fade(@color-red,85%);*/

/*
TODO: Not global, should be with nav stuff
//  ============================================================================
//  $ COMPONENT VARIABLES: NAVIGATION
//  ============================================================================
@navEmployer--backgroundColor:                      spin(saturate(darken(@color-grayMid,27%),17%),2);
@navEmployer--linkPrimary:              desaturate(darken(@color-grayMid,5%),7%);
@navEmployer--linkPrimaryActive:        darken(@color-white,9%);
@navEmployer--linkPrimaryBck:           @color-navEmployer--background;
@navEmployer--linkPrimaryBckActive:     spin(saturate(darken(@color-grayMid,15%),1%),2);
@navEmployer--linkSecondary:            spin(desaturate(lighten(@color-grayMid,14%),14%),4);

@navEmployerUser--backgroundColor:                  spin(saturate(darken(@color-grayMid,39%),31%),2);
@navEmployerUser--link:                 spin(desaturate(darken(@color-grayMid,37%),13%),-6);*/
